
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ir.ac.guilan.Compiler.Project.Cola.syntactic;

import java_cup.runtime.*;
import ir.ac.guilan.Compiler.Project.Cola.lexical.*;
import java.util.*;
import static ir.ac.guilan.Compiler.Project.Cola.lexical.Constants.*;
import static ir.ac.guilan.Compiler.Project.Cola.syntactic.sym.Identifier;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\020\004\000\002\002\004\000\002\020" +
    "\004\000\002\020\003\000\002\017\006\000\002\010\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\005\005\000\002" +
    "\005\006\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\012\012\000\002\013\006\000" +
    "\002\013\003\000\002\003\012\000\002\021\003\000\002" +
    "\021\003\000\002\022\006\000\002\022\004\000\002\004" +
    "\006\000\002\004\007\000\002\023\003\000\002\023\003" +
    "\000\002\024\005\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\015\005\000\002" +
    "\015\004\000\002\014\005\000\002\014\003\000\002\014" +
    "\003\000\002\007\011\000\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\010\002\uffd6\037\007\043\004\001\002\000" +
    "\004\040\123\001\002\000\004\002\122\001\002\000\010" +
    "\002\uffd6\037\007\043\004\001\002\000\004\013\013\001" +
    "\002\000\010\002\uffd6\037\007\043\004\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\001\001\002\000\020\011" +
    "\021\014\uffd6\027\016\030\017\035\020\040\023\043\014" +
    "\001\002\000\004\040\116\001\002\000\004\012\ufff8\001" +
    "\002\000\004\040\115\001\002\000\004\040\114\001\002" +
    "\000\004\025\106\001\002\000\004\025\065\001\002\000" +
    "\004\014\064\001\002\000\014\021\055\024\054\025\053" +
    "\027\051\030\052\001\002\000\004\014\ufff9\001\002\000" +
    "\004\014\ufffb\001\002\000\004\012\047\001\002\000\004" +
    "\012\ufff7\001\002\000\004\040\032\001\002\000\004\014" +
    "\ufffa\001\002\000\006\024\034\025\033\001\002\000\012" +
    "\026\uffd6\040\042\041\040\044\043\001\002\000\004\040" +
    "\uffdc\001\002\000\006\020\045\026\uffe3\001\002\000\006" +
    "\020\uffe0\026\uffe0\001\002\000\004\026\uffe2\001\002\000" +
    "\006\020\uffde\026\uffde\001\002\000\004\026\044\001\002" +
    "\000\006\020\uffdd\026\uffdd\001\002\000\006\020\uffdf\026" +
    "\uffdf\001\002\000\004\012\uffe4\001\002\000\010\040\042" +
    "\041\040\044\043\001\002\000\006\020\uffe1\026\uffe1\001" +
    "\002\000\020\011\021\014\uffd6\027\016\030\017\035\020" +
    "\040\023\043\014\001\002\000\004\014\ufffc\001\002\000" +
    "\004\012\ufff4\001\002\000\004\012\ufff2\001\002\000\012" +
    "\026\uffd6\040\042\041\040\044\043\001\002\000\004\040" +
    "\uffdb\001\002\000\010\040\060\041\057\044\061\001\002" +
    "\000\004\012\ufff6\001\002\000\004\012\uffef\001\002\000" +
    "\004\012\ufff0\001\002\000\004\012\uffee\001\002\000\004" +
    "\026\063\001\002\000\004\012\uffe5\001\002\000\010\002" +
    "\ufffd\037\ufffd\043\ufffd\001\002\000\010\033\067\034\066" +
    "\040\070\001\002\000\004\026\uffd8\001\002\000\004\026" +
    "\uffd9\001\002\000\004\023\104\001\002\000\004\026\072" +
    "\001\002\000\004\013\073\001\002\000\020\011\021\014" +
    "\uffd6\027\016\030\017\035\020\040\023\043\014\001\002" +
    "\000\004\014\075\001\002\000\006\014\uffd6\036\077\001" +
    "\002\000\004\014\uffed\001\002\000\004\013\101\001\002" +
    "\000\004\014\uffeb\001\002\000\020\011\021\014\uffd6\027" +
    "\016\030\017\035\020\040\023\043\014\001\002\000\004" +
    "\014\103\001\002\000\004\014\uffec\001\002\000\004\040" +
    "\105\001\002\000\004\026\uffda\001\002\000\010\033\067" +
    "\034\066\040\070\001\002\000\004\026\110\001\002\000" +
    "\004\013\111\001\002\000\020\011\021\014\uffd6\027\016" +
    "\030\017\035\020\040\023\043\014\001\002\000\004\014" +
    "\113\001\002\000\004\014\uffd7\001\002\000\004\012\ufff1" +
    "\001\002\000\004\012\ufff3\001\002\000\004\021\117\001" +
    "\002\000\010\040\060\041\057\044\061\001\002\000\004" +
    "\012\ufff5\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\000\001\002\000\004\025\124\001\002\000\006\026\uffd6" +
    "\043\126\001\002\000\006\020\136\026\uffe9\001\002\000" +
    "\004\040\135\001\002\000\004\026\131\001\002\000\004" +
    "\026\uffe8\001\002\000\004\013\132\001\002\000\020\011" +
    "\021\014\uffd6\027\016\030\017\035\020\040\023\043\014" +
    "\001\002\000\004\014\134\001\002\000\010\002\uffea\037" +
    "\uffea\043\uffea\001\002\000\006\020\uffe6\026\uffe6\001\002" +
    "\000\004\043\137\001\002\000\004\040\140\001\002\000" +
    "\006\020\uffe7\026\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\012\002\010\003\007\017\005\020\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\010" +
    "\003\007\017\005\020\120\001\001\000\002\001\001\000" +
    "\012\002\010\003\007\017\005\020\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\023\004\026\005" +
    "\014\007\030\010\021\011\025\012\024\015\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\036\023" +
    "\040\024\034\025\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\045\001\001\000\002\001" +
    "\001\000\022\002\023\004\026\005\014\007\030\010\047" +
    "\011\025\012\024\015\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\036\023\061" +
    "\024\034\025\035\001\001\000\002\001\001\000\004\016" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\023\004\026\005\014" +
    "\007\030\010\073\011\025\012\024\015\027\001\001\000" +
    "\002\001\001\000\006\002\077\013\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\023\004\026\005\014\007\030\010\101\011\025\012\024" +
    "\015\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\023\004" +
    "\026\005\014\007\030\010\111\011\025\012\024\015\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\127\021\126\022\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\023" +
    "\004\026\005\014\007\030\010\132\011\025\012\024\015" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 /* s.init(); */ 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Lexer s;
    Parser(Lexer s) { this.s = s;}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    Map<String, Integer> sourceTypes = new HashMap();

    Map<String, ArrayList<Integer>> sourceSignatures = new HashMap();

    public String regularName(Integer type){
        if(type == TypeInt) return "Integer";
        if(type == TypeString) return "String";
        return "";
    }

        public String argTypeWriter(ArrayList<Integer> list){
            String type = "";
            for(int i = 0; i < list.size() - 1; i++){
               type += regularName(list.get(i)) + ", ";
            }
            type += regularName(list.get(list.size() - 1));

            return type;
        }

        public  void argCheck(ArrayList<Integer> arg1, ArrayList<Integer> arg2, String funcName){
            if(arg1 == null || arg2 == null) {
                System.out.println("Function \'" + funcName + "\' doesn't exist in the current context." );
                return;
            }
            if(arg1.size() != arg2.size())
                System.out.println("Method signature mismatch! \'" + funcName + "\' defined with " + arg1.size() + " arguments. You've provided " + arg2.size() + " arguments.");
            else{
                boolean isCorrect = true;
                Integer provided = 0;
                Integer expected = 0;
                for(int i = 0; i < arg1.size(); i++){
                    if(!arg1.get(i).equals(arg2.get(i))) {
                        expected = arg1.get(i); provided = arg2.get(i);
                        isCorrect =false; break;
                    }
                }

                if(isCorrect)
                    System.out.println("Method call with name \'" + funcName + "\' was ok!");
                else
                    System.out.println("Method call mismatch! Expected arg type: \'" + regularName(expected) + "\', provided: \'" + regularName(provided));
            }
        }


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Code ::= MethodDeclare Code 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Code",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Code EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Code ::= EntryBlock Code 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Code",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Code ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Code",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EntryBlock ::= EntryPoint BeginBlock Statements EndBlock 
            {
              Object RESULT =null;
		 System.out.println(">> Code entry point found!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EntryBlock",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Statement Semi Statements 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= IfStatement 
            {
              Object RESULT =null;
		 System.out.println("New if statement!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statements ::= Loop 
            {
              Object RESULT =null;
		 System.out.println("New While Loop!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statements ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= Assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= MethodCall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Assignment ::= Identifier Assign AssignmentVal 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeValuePair b = (TypeValuePair)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        System.out.println("Assigning Value \'" + b.Value +"\' to \'" + i + "\'!");
                        if(!sourceTypes.get(i).equals(b.Type)){
                            System.out.println("error: Type '" + regularName(b.Type) +  "' doesn't match type '" + regularName(sourceTypes.get(i)) + "'.");
                        }
                        else{
                            System.out.println("Assignment was ok.");
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Assignment ::= Type Identifier Assign AssignmentVal 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeValuePair v = (TypeValuePair)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        sourceTypes.put(i, v.Type);
                        System.out.println(">> New variable declared with name \'" + i + "\' with value \'" + v.Value + "\'!");
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Assignment ::= Identifier PlusPlus 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Variable \'" + i + "\' incremented."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Assignment ::= PlusPlus Identifier 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Variable \'" + i + "\' incremented."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Assignment ::= Identifier MinusMinus 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Variable \'" + i + "\' decremented."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Assignment ::= MinusMinus Identifier 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Variable \'" + i + "\' decremented."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AssignmentVal ::= Identifier 
            {
              TypeValuePair RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeValuePair(i, Identifier); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentVal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AssignmentVal ::= StringConst 
            {
              TypeValuePair RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeValuePair(i, TypeString); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentVal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AssignmentVal ::= NumValue 
            {
              TypeValuePair RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeValuePair("" + i, TypeInt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentVal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IfStatement ::= If LPar Condition RPar BeginBlock Statements EndBlock ElseStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ElseStatement ::= Else BeginBlock Statements EndBlock 
            {
              Object RESULT =null;
		 System.out.println("If statement has an else part."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ElseStatement ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclare ::= Type Identifier LPar MethodSignature RPar BeginBlock Statements EndBlock 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                    if(s == null) sourceSignatures.put(i, null);
                    else sourceSignatures.put(i, s);
                    System.out.println(">> Method " + i.toString() + " Declared! with arg types: " + argTypeWriter(s));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclare",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodSignature ::= Signature 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSignature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MethodSignature ::= empty 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSignature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Signature ::= Signature Comma Type Identifier 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        s.add(t);
                        RESULT = s;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Signature ::= Type Identifier 
            {
              ArrayList<Integer> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        ArrayList<Integer> list = new ArrayList<>();
                        list.add(s);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodCall ::= Identifier LPar MethodArgs RPar 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Integer> a = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        System.out.println(">> Method " + i.toString() + " called!");
                        argCheck(sourceSignatures.get(i), a, i);
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodCall",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodCall ::= BaseName Identifier LPar MethodArgs RPar 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 System.out.println(">> Method " + i.toString() + " called!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodCall",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodArgs ::= Args 
            {
              ArrayList<Integer> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Integer> i = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodArgs ::= empty 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = new ArrayList<Integer>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Args ::= Args Comma Arg 
            {
              ArrayList<Integer> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Integer> i = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeValuePair t = (TypeValuePair)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    i.add(t.Type);
                    RESULT = i;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Args ::= Arg 
            {
              ArrayList<Integer> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeValuePair t = (TypeValuePair)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Integer> argL = new ArrayList<>();
                    argL.add(t.Type);
                    RESULT = argL;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Arg ::= NumValue 
            {
              TypeValuePair RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeValuePair("" + i, TypeInt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arg",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Arg ::= StringConst 
            {
              TypeValuePair RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeValuePair("" + i, TypeString); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arg",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Arg ::= Identifier 
            {
              TypeValuePair RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeValuePair(i, Identifier); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arg",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BaseName ::= BaseName Identifier Dot 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BaseName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BaseName ::= Identifier Dot 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BaseName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Condition ::= Identifier Comparator Identifier 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Condition ::= True 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Condition ::= False 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Loop ::= While LPar Condition RPar BeginBlock Statements EndBlock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
